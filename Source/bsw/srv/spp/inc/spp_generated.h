/**
 * This file is generated by SPP Configurator, do not modify it manually!
 *
 * Copyright@2018 SAIC Motor Coporation Limited
 *
 * All Right Reserved
 *
 */

#ifndef MCU_SPP_H
#define MCU_SPP_H

#include "sppc_core.h"
#include "sppc_core_types.h"

#pragma pack(1)

#ifdef __cplusplus
extern "C" {
#endif
#define SPP_USER_RECV_DCPD_MSG_TO_MCU_FOTA_FBL_COM_EVT  0x1002
#define SPP_USER_SEND_DCPD_MSG_TO_MPU_FOTA_FBL_COM_EVT  0x1002

typedef enum {
	SPP_USER_SEND_DCPD_MSG_TO_MPU_APN_CFG_RESP_EVT = SPP_USER_EVENT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_IMEI_B004_REQ_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_ICCID_B001_REQ_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_NADSTA1_B180_REQ_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_NADSTA2_B181_REQ_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_NADIP1_B182_REQ_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_USER_ID_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_NADIP2_B183_REQ_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_RC_OTA_MSG_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_BTC_OTA_MSG_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_CA81_UPDATE_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_CF01_UPDATE_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_VIN_F190_UPDATE_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_START_AC_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_AC_CFG_VER_RESP_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_AC_CFG_SAVE_RESP_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_AC_INI_CFG_RESP_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_TSP_IP_C007_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_TSP_SMS_C008_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_TSP_PORT_C009_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_TBOX_SN_F18C_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_APP_STA_B200_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_VS_DATA_RESP_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_CLR_ALM_REQ_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_ALM_REQ_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_START_RJ_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_UPDTAE_RJ_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_END_RJ_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_NAD_SW_VER_B005_REQ_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_NAD_HW_VER_B006_REQ_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_MPUSW_VER_F1B5_REQ_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_MPUSUPSW_VER_B000_REQ_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_TSP_APN_C001_UPDATE_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_TSP_APN_USR_C002_UPDATE_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_TSP_APN_PSW_C003_UPDATE_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_INFO_APN_C004_UPDATE_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_INFO_APN_USR_C005_UPDATE_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_INFO_APN_PSW_C006_UPDATE_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_VMODEL_C102_UPDATE_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_START_KEYEXCHANGE_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_KE_SAVE_RESULT_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_PM_STATUS_UPDATE_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_SIM_STA_ACK_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_TCALL_CFG_RESP_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_FOTA_CHK_REQ_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_FOTA_CFG_RESP_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_FOTA_WAKEUPCAN_RESP_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_FOTA_CHK_RESP_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_RDIAG_CHK_RESP_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_RDIAG_RESP_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_DTC_REPORT_REQ_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_CERT_UPD_REQ_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_AC_CERT_UPD_STA_ACK_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_BD_START_STOP_INFO_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_BD_EVENT_DATA_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_SYS_TIME_RESP_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_FOTA_UDISK_UPD_REQ_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_SYS_TIME_REQ_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_RC_OTA_MSG_ACK_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_BTC_OTA_MSG_ACK_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_AVNSRV_VER_RESP_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_FOTA_KEY_STA_IND_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_FOTA_VER_RESP_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_UPGRADE_INFO_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_RESET_TBOX_ACK_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_ENTER_DEV_MD_REQ_EVT,
	SPP_USER_SEND_MCU_REQ_GNSS_EVT,
	SPP_USER_SEND_MCU_REQ_WAN_EVT,
	SPP_USER_SEND_MCU_REQ_UART_EVT,
	SPP_USER_SEND_MCU_REQ_PING_EVT,
	SPP_USER_SEND_DCPD_MSG_TO_MPU_EOL_CMD_REQ_EVT,
	SPP_USER_SEND_EVENT_MAX
} ESendEvent;

typedef enum {
	SPP_USER_RECV_DCPD_MSG_TO_MCU_APN_CFG_REQ_EVT = SPP_USER_EVENT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_IMEI_B004_RESP_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_GNSS_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_ICCID_B001_RESP_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_NADSTA1_B180_RESP_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_NADSTA2_B181_RESP_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_NADIP1_B182_RESP_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_NADIP2_B183_RESP_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_RC_OTA_MSG_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_BTC_OTA_MSG_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_RC_OTA_TX_RESULT_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_BTC_OTA_TX_RESULT_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_AC_CFG_VER_REQ_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_AC_CFG_SAVE_REQ_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_VS_DATA_REQ_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_AC_INI_CFG_REQ_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_NAD_SW_VER_B005_RESP_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_NAD_HW_VER_B006_RESP_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_MPUSW_VER_F1B5_RESP_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_MPUSUPSW_VER_B000_RESP_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_RESET_TBOX_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_UPDATE_KE_STA_B210_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_SAVE_KE_RESULT_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_IS_SLEEP_READY_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_PM_CHANGE_END_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_VERSION_SYNC_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_SIM_STA_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_TCALL_CFG_REQ_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_FOTA_CFG_REQ_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_FOTA_WAKEUPCAN_REQ_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_FOTA_CHK_REQ_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_RDIAG_CHK_REQ_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_RDIAG_REQ_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_APN_STA_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_AC_CERT_UPD_ACK_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_AC_CERT_UPD_STA_INFO_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_BD_START_STOP_ACK_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_DIAG_UDISK_UPD_ACK_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_DIAG_UDISK_UPD_SAT_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_SYS_TIME_REQ_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_SYS_TIME_RESP_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_RC_OTA_MSG_ACK_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_BTC_OTA_MSG_ACK_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_DTC_REPORT_ACK_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_START_AC_ACK_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_USER_ID_ACK_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_CLR_ALM_REQ_ACK_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_ALM_REQ_ACK_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_START_RJ_ACK_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_END_RJ_ACK_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_AVNSRV_VER_REQ_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_DIAG_FOTA_VER_REQ_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_UPGRADE_ACK_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_ENTER_DEV_MD_RESP_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_VIN_F190_UPDATE_ACK_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_TSP_IP_C007_ACK_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_TSP_SMS_C008_ACK_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_TSP_PORT_C009_ACK_EVT,
	SPP_USER_RECV_MPU_RES_GNSS_EVT,
	SPP_USER_RECV_MPU_RES_WAN_EVT,
	SPP_USER_RECV_MPU_RES_UART_EVT,
	SPP_USER_RECV_MPU_RES_PING_EVT,
	SPP_USER_RECV_DCPD_MSG_TO_MCU_EOL_CMD_RESP_EVT,
	SPP_USER_RECV_EVENT_MAX
} ERecvEvent;

typedef enum {
	DCPD_TBOX_ENC_TYPE_IN_OTA_UPER = 0,	//!n.a
	DCPD_TBOX_ENC_TYPE_IN_OTA_DER = 1,	//!n.a
	DCPD_TBOX_ENC_TYPE_IN_OTA_BER = 2,	//!n.a
} DcpdPackageTboxEncodeTypeInOta_e;
typedef enum {
	DCPD_APP_SRV_ID_AVNSRV = 0,	//!n.a
	DCPD_APP_SRV_ID_OTASRV = 1,	//!n.a
	DCPD_APP_SRV_ID_BIGDATA_APP = 2,	//!n.a
	DCPD_APP_SRV_ID_AUXSRV = 3,	//!n.a
	DCPD_APP_SRV_ID_RVMAPP = 4,	//!n.a
	DCPD_APP_SRV_ID_ACAPP = 5,	//!n.a
	DCPD_APP_SRV_ID_TCALLAPP = 6,	//!n.a
	DCPD_APP_SRV_ID_FOTA_APP = 7,	//!n.a
	DCPD_APP_SRV_ID_SYS_MGR_SRV = 8,	//!n.a
	DCPD_APP_SRV_ID_WAN_SRV = 9,	//!n.a
	DCPD_APP_SRV_ID_GNSS_SRV = 10,	//!n.a
} DcpdPackageAppSrvId_e;
typedef enum {
	DCPD_TBOX_ID_TYPE_IN_OTA_ID = 0,	//!n.a
	DCPD_TBOX_ID_TYPE_IN_OTA_SN = 1,	//!n.a
} DcpdPackageTboxIdTypeInOta_e;
typedef enum {
	DCPD_RC_CONTROL_TYPE_FIND_CAR = 0,	//!n.a
	DCPD_RC_CONTROL_TYPE_LOCK = 1,	//!n.a
	DCPD_RC_CONTROL_TYPE_UNLOCK = 2,	//!n.a
	DCPD_RC_CONTROL_TYPE_WIN_CTRL = 3,	//!n.a
	DCPD_RC_CONTROL_TYPE_VKM = 4,	//!n.a
	DCPD_RC_CONTROL_TYPE_HEAT_SEAT = 5,	//!n.a
	DCPD_RC_CONTROL_TYPE_CLIMATE_CTRL = 6,	//!n.a
	DCPD_RC_CONTROL_TYPE_AIR_CLEAN_CTRL = 7,	//!n.a
	DCPD_RC_CONTROL_TYPE_ENGINE_CTRL = 8,	//!n.a
	DCPD_RC_CONTROL_TYPE_REMOTE_REFRESH = 9,	//!n.a
} DcpdPackageRcControlType_e;
typedef enum {
	DCPD_RC_CONTROL_PARM_ID_FMC_LIGNTS = 1,	//!n.a
	DCPD_RC_CONTROL_PARM_ID_FMC_HORN = 2,	//!n.a
	DCPD_RC_CONTROL_PARM_ID_FMC_LEN = 3,	//!n.a
	DCPD_RC_CONTROL_PARM_ID_UNLOCK_SILENT = 4,	//!n.a
	DCPD_RC_CONTROL_PARM_ID_UNLOCK_SILENT_TIME = 5,	//!n.a
	DCPD_RC_CONTROL_PARM_ID_UNLOCK_PM_OVERIDE = 6,	//!n.a
	DCPD_RC_CONTROL_PARM_ID_UNLOCK_DOORS = 7,	//!n.a
	DCPD_RC_CONTROL_PARM_ID_EGN_REQ_TYPE = 16,	//!n.a
	DCPD_RC_CONTROL_PARM_ID_HEAT_SEAT_DRV = 17,	//!n.a
	DCPD_RC_CONTROL_PARM_ID_HEAT_SEAT_PSNG = 18,	//!n.a
	DCPD_RC_CONTROL_PARM_ID_CLIMATE_TYPE = 19,	//!n.a
	DCPD_RC_CONTROL_PARM_ID_CLIMATE_TEMP = 20,	//!n.a
	DCPD_RC_CONTROL_PARM_ID_CANCEL = 255,	//!n.a
} DcpdPackageRcControlParmId_e;
typedef enum {
	DCPD_RVS_NO_GPS_SIG = 0,	//!n.a
	DCPD_RVS_TIME_FIX = 1,	//!n.a
	DCPD_RVS_2D_FIX = 2,	//!n.a
	DCPD_RVS_3D_FIX = 3,	//!n.a
} DcpdPackageRvsGpsStatus_e;
typedef enum {
	DCPD_RVC_FT_SUC = 0,	//!n.a
	DCPD_RVC_FT_PWM_NOT_OFF = 1,	//!n.a
	DCPD_RVC_FT_UNLOCKED = 2,	//!n.a
	DCPD_RVC_FT_DOING_OTRHER_CMD = 3,	//!n.a
	DCPD_RVC_FT_RUNNING_CMD = 4,	//!n.a
	DCPD_RVC_FT_CMD_FINISHED = 5,	//!n.a
	DCPD_RVC_FT_CMD_UNKNOWN = 6,	//!n.a
	DCPD_RVC_FT_RVC_DISABLE = 7,	//!n.a
	DCPD_RVC_FT_RVC_COM_LOST = 8,	//!n.a
	DCPD_RVC_FT_RVC_CONTINUE_INVALID = 9,	//!n.a
	DCPD_RVC_FT_RVC_UN_ARMED = 10,	//!n.a
	DCPD_RVC_FT_RVC_LIGHTS_FAILED = 20,	//!n.a
	DCPD_RVC_FT_RVC_DOOR_OPENED = 21,	//!n.a
	DCPD_RVC_FT_RVC_LOCKED_SYS_FAILED = 22,	//!n.a
	DCPD_RVC_FT_RVC_WIN_CLOSED = 23,	//!n.a
	DCPD_RVC_FT_RVC_ANTI_PINCH = 24,	//!n.a
	DCPD_RVC_FT_RVC_DOOR_UNLOCKED = 25,	//!n.a
	DCPD_RVC_FT_RVC_VEH_ALM = 26,	//!n.a
	DCPD_RVC_FT_RVC_TEMP_UN_ACHIEVED = 27,	//!n.a
	DCPD_RVC_FT_RVC_TEMP_AC_SYS_FAILED = 28,	//!n.a
	DCPD_RVC_FT_RVC_TEMP_AC_SYS_ABORT = 29,	//!n.a
	DCPD_RVC_FT_RVC_TEMP_ERR_DOOR_TRG_SRC = 30,	//!n.a
	DCPD_RVC_FT_WIN_SYS_FAIL = 31,	//!n.a
	DCPD_RVC_FT_REQ_ID_WRONG = 32,	//!n.a
	DCPD_RVC_FT_SHT_NO_PARK_CRANK_NO_PERMIT = 33,	//!n.a
	DCPD_RVC_FT_VEC_SPEED_LIMIT = 34,	//!n.a
	DCPD_RVC_FT_MIL_RELATE_DTC = 35,	//!n.a
	DCPD_RVC_FT_COMMU_BCM_GW_SCS_ABS_TCMC = 36,	//!n.a
	DCPD_RVC_FT_IN_POST_COLLISION = 37,	//!n.a
	DCPD_RVC_FT_FUEL_LEVEL_LOW = 38,	//!n.a
	DCPD_RVC_FT_KL15_DISCONNECT = 39,	//!n.a
	DCPD_RVC_FT_MAX_CRANK_TIME_EXPIRE = 40,	//!n.a
	DCPD_RVC_FT_IN_CHARGING = 41,	//!n.a
	DCPD_RVC_FT_KEY_IS_DEL = 42,	//!n.a
	DCPD_RVC_FT_EEPROM_WRITE_FAIL = 46,	//!n.a
	DCPD_RVC_FT_REASON_UNKNOW = 47,	//!n.a
	DCPD_RVC_FT_HORN_DRIVER_FAL = 49,	//!n.a
	DCPD_RVC_FT_ENGINE_OVERHEAT = 54,	//!n.a
	DCPD_RVC_FT_LOW_OIL_PRESSURE = 56,	//!n.a
	DCPD_RVC_FT_ENGINE_SPEED_LIMIT = 57,	//!n.a
	DCPD_RVC_FT_ACCELE_PEDAL_LIMIT = 58,	//!n.a
	DCPD_RVC_FT_AUTHEN_FAIL = 59,	//!n.a
	DCPD_RVC_FT_MAX_RUN_TIME_EXPIRE = 60,	//!n.a
	DCPD_RVC_FT_RVC_KEY_VEC = 64,	//!n.a
	DCPD_RVC_FT_RVC_HAZARD_ACTIVE = 65,	//!n.a
	DCPD_RVC_FT_BONNET_OPEN = 67,	//!n.a
	DCPD_RVC_FT_BONNET_SWITCH_FAIL = 68,	//!n.a
	DCPD_RVC_FT_IGNITION = 69,	//!n.a
	DCPD_RVC_FT_VOLTAGE_OUT = 70,	//!n.a
	DCPD_RVC_FT_STAT_TIME_OUT = 71,	//!n.a
	DCPD_RVC_FT_RVC_ATTEMPT_TIME_OUT = 72,	//!n.a
	DCPD_RVC_FT_ENGINE_STALLED = 73,	//!n.a
	DCPD_RVC_FT_REQ_PARA_FRM_PRT = 80,	//!n.a
	DCPD_RVC_FT_BATTERY_LOW = 208,	//!n.a
	DCPD_RVC_FT_NO_UPDATE_PACKAGE_DEC = 209,	//!n.a
	DCPD_RVC_FT_RUN_STATUS_IN_REMOTE_ENGINE = 210,	//!n.a
	DCPD_RVC_FT_REQ_EXPIERD = 211,	//!n.a
	DCPD_RVC_FT_REMOTE_FRESH1 = 224,	//!n.a
	DCPD_RVC_FT_REMOTE_FRESH2 = 225,	//!n.a
	DCPD_RVC_FT_REMOTE_FRESH3 = 226,	//!n.a
	DCPD_RVC_FT_REMOTE_FRESH4 = 227,	//!n.a
	DCPD_RVC_FT_REMOTE_FRESH5 = 228,	//!n.a
	DCPD_RVC_FT_REMOTE_FRESH6 = 229,	//!n.a
	DCPD_RVC_FT_REMOTE_FRESH7 = 230,	//!n.a
	DCPD_RVC_FT_REMOTE_FRESH8 = 231,	//!n.a
	DCPD_RVC_FT_REMOTE_FRESH9 = 232,	//!n.a
	DCPD_RVC_FT_REMOTE_FRESH10 = 233,	//!n.a
	DCPD_RVC_FT_REMOTE_FRESH11 = 234,	//!n.a
	DCPD_RVC_FT_REMOTE_FRESH12 = 235,	//!n.a
	DCPD_RVC_FT_REMOTE_FRESH13 = 236,	//!n.a
	DCPD_RVC_FT_REMOTE_FRESH14 = 237,	//!n.a
	DCPD_RVC_FT_REMOTE_FRESH15 = 238,	//!n.a
	DCPD_RVC_FT_REMOTE_FRESH16 = 239,	//!n.a
	DCPD_RVC_FT_SECURE_CAN_TIME_OUT = 251,	//!n.a
	DCPD_RVC_FT_BCM_NODE_UNAVAILABLE = 252,	//!n.a
	DCPD_RVC_FT_GETWAY_NODE_MISS = 253,	//!n.a
	DCPD_RVC_FT_UODATA_STUS_FUNTION_TIMEOUT = 254,	//!n.a
	DCPD_RVC_FT_FEATURE_REQ_NOTSUPRT = 255,	//!n.a
} DcpdPackageRvcFailType_e;
typedef enum {
	DCPD_CeRVS_NoGpsSignal = 0,	//!n.a
	DCPD_CeRVS_TimeFix = 1,	//!n.a
	DCPD_CeRVS_Fix2D = 2,	//!n.a
	DCPD_CeRVS_Fix3D = 3,	//!n.a
} DcpdPackageRvsGpsSatus_e;
typedef enum {
	DCPD_DV_TEST_MPU_SLEEP = 1,	//!n.a
	DCPD_DV_TEST_MPU_WAKEUP = 2,	//!n.a
	DCPD_DV_TEST_MCU_WAKEUP = 3,	//!n.a
	DCPD_DV_TEST_OPEN_AUDIO_LOOPBACK = 4,	//!n.a
	DCPD_DV_TEST_CLOSE_AUDIO_LOOPBACK = 5,	//!n.a
	DCPD_DV_TEST_SIM_READY = 6,	//!n.a
	DCPD_DV_TEST_SIM_INFO = 7,	//!n.a
	DCPD_DV_TEST_ENTER_FIGHT_MODE = 8,	//!n.a
	DCPD_DV_TEST_EXIT_FIGHT_MODE = 9,	//!n.a
} DcpdPackageDvTestEventType_e;

typedef struct {
	SPP_UInt8 u8SrcSrvId;	//!n.a
	SPP_UInt8 u8DstSrvId;	//!n.a
	SPP_UInt16 u16EventId;	//!n.a
	SPP_UInt16 u16CommandId;	//!n.a
	SPP_UInt8 u8Index;	//!n.a
} DcpdPackageHeader_t;

typedef struct {
	SPP_Int8 buf[64];
} DcpdPackageChar64;

typedef struct {
	SPP_Int8 buf[32];
} DcpdPackageChar32;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar64 strTspApnAddrC001;	//!n.a
	DcpdPackageChar32 strTspApnUsrC002;	//!n.a
	DcpdPackageChar32 strTspApnPswC003;	//!n.a
	DcpdPackageChar64 strInfoApnAddrC004;	//!n.a
	DcpdPackageChar32 strInfoApnUsrC005;	//!n.a
	DcpdPackageChar32 strInfoApnPswC006;	//!n.a
	DcpdPackageChar32 strInfoTspIpC007;	//!n.a
} DcpdPackageToMpuApnCfg_t;

typedef struct {
	SPP_Int8 buf[24];
} DcpdPackageChar24;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar24 strImeiB004;	//!n.a
} DcpdPackageToMcuImei_t;

typedef struct {
	SPP_UInt8 u8SatelliteInViewId;	//!n.a
	SPP_UInt8 u8Elevation;	//!n.a
	SPP_UInt16 u16Azimuth;	//!n.a
	SPP_UInt8 u8Snr;	//!n.a
	SPP_UInt8 u8IsUsed;	//!n.a
} DcpdPackageSatelliteDetail_t;

typedef struct {
	SPP_UInt8 buf[12];
} DcpdPackageUChar12;

typedef struct {
	DcpdPackageSatelliteDetail_t buf[24];
} DcpdPackageSatelliteDetail_tt;

typedef struct {
	SPP_UInt8 u8InfoType;	//!n.a
	SPP_Int32 i32Longitude;	//!n.a
	SPP_Int32 i32Latitude;	//!n.a
	SPP_Int32 i32Altitude;	//!n.a
	SPP_Int16 i16Declination;	//!n.a
	SPP_UInt16 u16T_direction;	//!n.a
	SPP_UInt16 u16M_direction;	//!n.a
	SPP_UInt16 u16Speed;	//!n.a
	SPP_UInt16 u16PDOP;	//!n.a
	SPP_UInt16 u16HDOP;	//!n.a
	SPP_UInt16 u16VDOP;	//!n.a
	SPP_UInt8 u8FixStatus;	//!n.a
	SPP_UInt8 u8GnssLocateType;	//!n.a
	SPP_UInt8 u8VisibleSatellites;	//!n.a
	SPP_UInt8 u8UsingSatellites;	//!n.a
	DcpdPackageUChar12 u8TimeStamp;	//!n.a
	DcpdPackageSatelliteDetail_tt tSatellitesDetail;	//!n.a
} DcpdPackageNmeaInfo_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageNmeaInfo_t tGnssData;	//!n.a
} DcpdPackageToMcuGnss_t;

typedef struct {
	SPP_Int8 buf[20];
} DcpdPackageChar20;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar20 strIccidB001;	//!n.a
} DcpdPackageToMcuIccid_t;

typedef struct {
	SPP_Int8 buf[3];
} DcpdPackageChar3;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar3 strMccB180;	//!n.a
	DcpdPackageChar3 strMncB180;	//!n.a
} DcpdPackageToMcuMccMncB180_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt16 u16Csq;	//!n.a
	SPP_Int16 i16NadRssiB181;	//!n.a
	SPP_UInt8 u8TechTypeB181;	//!n.a
	SPP_UInt8 u8SimUsed;	//!n.a
	SPP_UInt8 u8NadReg;	//!n.a
} DcpdPackageToMcuNadStaB181_t;

typedef struct {
	SPP_Int8 buf[16];
} DcpdPackageChar16;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar16 strNadIp1B182;	//!n.a
} DcpdPackageToMcuNadIp1B182_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar16 strNadIp2B183;	//!n.a
} DcpdPackageToMcuNadIp2B183_t;

typedef struct {
	SPP_UInt16 Bitmap;	//!n.a
	DcpdPackageChar3 strApplicationID;	//!n.a
	SPP_UInt32 u32EventCreationTime;	//!n.a
	SPP_UInt8 u32MessageID;	//!n.a
	SPP_UInt32 u32EventID;	//!n.a
	SPP_UInt16 u16UplinkMessageCounter;	//!n.a
	SPP_UInt16 u16DownlinkMessageCounter;	//!n.a
	SPP_UInt16 u16AckMessageCounter;	//!n.a
	SPP_UInt8 bAckRequired;	//!n.a
	SPP_UInt16 u16ApplicationDataLength;	//!n.a
	DcpdPackageTboxEncodeTypeInOta_e eApplicationDataEncoding:8;	//!n.a
	SPP_UInt16 u16ApplicationDataProtocolVersion;	//!n.a
	SPP_UInt8 u8TestFlag;	//!n.a
	SPP_UInt16 u16Result;	//!n.a
} DcpdPackageOtaDispatcherBody_t;

typedef struct {
	SPP_UInt8 buf[2];
} DcpdPackageUChar2;

typedef struct {
	SPP_UInt16 u16ParamID;	//!n.a
	SPP_UInt8 u8ParamSize;	//!n.a
	DcpdPackageUChar2 u8ArrParamValue;	//!n.a
} DcpdPackageOtaAppDataRvcReqParam_t;

typedef struct {
	DcpdPackageOtaAppDataRvcReqParam_t buf[10];
} DcpdPackageOtaAppDataRvcReqParam_tt;

typedef struct {
	SPP_UInt8 u8Bitmap;	//!n.a
	SPP_UInt8 u8RvcReqType;	//!n.a
	SPP_UInt8 u8RvcparamSize;	//!n.a
	DcpdPackageOtaAppDataRvcReqParam_tt tRvcParams;	//!n.a
} DcpdPackageOtaAppDataRvcReq_t;

typedef struct {
	SPP_UInt16 u16Bitmap;	//!n.a
	SPP_UInt8 bDriverDoor;	//!n.a
	SPP_UInt8 bPassengerDoor;	//!n.a
	SPP_UInt8 bRLDoor;	//!n.a
	SPP_UInt8 bRRDoor;	//!n.a
	SPP_UInt8 bBootStatus;	//!n.a
	SPP_UInt8 bBonnetStatus;	//!n.a
	SPP_UInt8 bLockStatus;	//!n.a
	SPP_UInt8 bDriverWindow;	//!n.a
	SPP_UInt8 bPassengerWindow;	//!n.a
	SPP_UInt8 bRLWindow;	//!n.a
	SPP_UInt8 bRRWindow;	//!n.a
	SPP_UInt8 bSunroofStatus;	//!n.a
	SPP_UInt8 u8FRTyrePressure;	//!n.a
	SPP_UInt8 u8FLTyrePressure;	//!n.a
	SPP_UInt8 u8RRTyrePressure;	//!n.a
	SPP_UInt8 u8RLTyrePressure;	//!n.a
	SPP_UInt8 u8WheelTyreMonitorStatus;	//!n.a
	SPP_UInt8 bSideLightStatus;	//!n.a
	SPP_UInt8 bDippedBeamStatus;	//!n.a
	SPP_UInt8 bMainBeamStatus;	//!n.a
	SPP_UInt8 u8VehicleAlarmStatus;	//!n.a
	SPP_UInt8 u8EngineStatus;	//!n.a
	SPP_UInt8 u8PowerMode;	//!n.a
	SPP_UInt16 u16LastKeySeen;	//!n.a
	SPP_UInt16 u16CurrentjourneyDistance;	//!n.a
	SPP_UInt32 u32CurrentJourneyID;	//!n.a
	SPP_Int8 i8InteriorTemperature;	//!n.a
	SPP_Int8 i8ExteriorTemperature;	//!n.a
	SPP_UInt8 u8FuelLevelPrc;	//!n.a
	SPP_UInt16 u16FuelRange;	//!n.a
	SPP_UInt8 u8RemoteClimateStatus;	//!n.a
	SPP_UInt8 u8FLSeatHeatLevel;	//!n.a
	SPP_UInt8 u8FRSeatHeatLevel;	//!n.a
	SPP_UInt8 bCanBusActive;	//!n.a
	SPP_UInt32 u32TimeCanBusActivity;	//!n.a
	SPP_UInt8 u8ClstrDspdFuelLvlSgmt;	//!n.a
	SPP_UInt8 brmtAirClnrA;	//!n.a
	SPP_UInt8 u8InsdAirPrtclMtrCDC;	//!n.a
	SPP_UInt8 u8OtsdAirPrtclMtrCDC;	//!n.a
	SPP_UInt16 u16VehBMSPackSOCDsp;	//!n.a
	SPP_UInt16 u16ClstrElecRngToEPT;	//!n.a
	SPP_UInt16 u16ClstrFuelRngToEPT;	//!n.a
	SPP_UInt8 u8VehChargerStatus;	//!n.a
	SPP_UInt8 u8VehBMSFltLvl;	//!n.a
	SPP_UInt8 u8VehBatSOC;	//!n.a
	SPP_UInt8 u8VehBatSOCSts;	//!n.a
	SPP_UInt8 u8VehicleBatteryStatus;	//!n.a
	SPP_UInt32 u32ExtendedData1;	//!n.a
	SPP_UInt32 u32ExtendedData2;	//!n.a
} DcpdPackageOtaAppDataRvsBasicData_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageOtaDispatcherBody_t tDispBody;	//!n.a
	DcpdPackageOtaAppDataRvcReq_t tOtaAppMsg;	//!n.a
	SPP_UInt8 bIsSms;	//!n.a
} DcpdPackageToMcuRcMid1OtaMsgRx_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt32 u32ReqId;	//!n.a
	SPP_UInt8 u8Result;	//!n.a
} DcpdPackageToMcuOtaTxResult_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8ReqType;	//!n.a
} DcpdPackageToMcuVsReq_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar24 strNadSwVerB005;	//!n.a
} DcpdPackageToMcuNadSwVerB005_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar24 strNadHwVerB006;	//!n.a
} DcpdPackageToMcuNadHwVerB006_t;

typedef struct {
	SPP_Int8 buf[5];
} DcpdPackageChar5;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar5 strMpuSwVerF1B5;	//!n.a
} DcpdPackageToMcuMpuSwVerF1B5_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar24 strMpuSupSwVerB000;	//!n.a
} DcpdPackageToMcuMpuSupSwVerB000_t;

typedef struct {
	SPP_UInt8 bKeComplete;	//!n.a
	SPP_UInt8 u8LastKeResult;	//!n.a
	SPP_UInt8 bKeExeSta;	//!n.a
} DcpdPackageDidB210Expand_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageDidB210Expand_t tDidB210;	//!n.a
} DcpdPackageToMcuUpdateKeStaB210_t;

typedef struct {
	SPP_UInt8 buf[16];
} DcpdPackageUChar16;

typedef struct {
	SPP_Int8 buf[12];
} DcpdPackageChar12;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageDidB210Expand_t tDidB210;	//!n.a
	DcpdPackageUChar16 u8ArrAesKey;	//!n.a
	DcpdPackageChar12 strTboxIdB007;	//!n.a
} DcpdPackageToMcuSaveKeResult_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8Result;	//!n.a
} DcpdPackageToMcuSleepReady_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8PowerMode;	//!n.a
} DcpdPackageToMcuPmChangeEnd_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar5 strMpuSwVerF1B5;	//!n.a
	DcpdPackageChar24 strMpuSupSwVerB000;	//!n.a
	DcpdPackageChar24 strNadSwVerB005;	//!n.a
	DcpdPackageChar24 strNadHwVerB006;	//!n.a
} DcpdPackageToMcuVerOfMpu_t;

typedef struct {
	SPP_Int8 buf[14];
} DcpdPackageChar14;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar14 strUserId;	//!n.a
} DcpdPackageToMpuUserId_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt32 u32DcpdReqId;	//!n.a
	DcpdPackageOtaDispatcherBody_t tDispBody;	//!n.a
	SPP_UInt8 bIsSms;	//!n.a
	SPP_UInt8 u8Bitmap;	//!n.a
	SPP_UInt8 u8RvcReqType;	//!n.a
	SPP_UInt8 u8RvcReqSts;	//!n.a
	SPP_UInt8 u8FailureType;	//!n.a
	DcpdPackageOtaAppDataRvsBasicData_t tBasicVehicleStatus;	//!n.a
} DcpdPackageToMpuRcMid3OtaMsgTx_t;

typedef struct {
	SPP_UInt8 buf[5];
} DcpdPackageUChar5;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageUChar5 u8CA81Data;	//!n.a
} DcpdPackageToMpuBdChnCfgCA81_t;

typedef struct {
	SPP_UInt8 buf[20];
} DcpdPackageUChar20;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageUChar20 u8CF01Data;	//!n.a
} DcpdPackageToMpuBdEventCfgCF01_t;

typedef struct {
	SPP_UInt8 buf[17];
} DcpdPackageUChar17;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageUChar17 u8Vin;	//!n.a
} DcpdPackageToMpuVin_t;

typedef struct {
	SPP_Int8 buf[10];
} DcpdPackageChar10;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar10 strEcuSwVerF194;	//!n.a
	DcpdPackageChar5 strEcuSwVerF1A0;	//!n.a
	DcpdPackageChar5 strEcuSwVerF1A1;	//!n.a
	DcpdPackageChar20 strBleSwVerB003;	//!n.a
	DcpdPackageChar12 strBleMacAddrVerB008;	//!n.a
	DcpdPackageUChar12 u8ArrCfgDelta;	//!n.a
	DcpdPackageChar5 strMpuSwVerF1B5;	//!n.a
	DcpdPackageChar24 strMpuSupSwVerB000;	//!n.a
	DcpdPackageChar24 strNadSwVerB005;	//!n.a
} DcpdPackageToMpuAcCfgVer_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8Result;	//!n.a
} DcpdPackageToMpuAcCfgSaveResult_t;

typedef struct {
	SPP_UInt8 u8AppMd;	//!n.a
	SPP_UInt8 bRcEn;	//!n.a
	SPP_UInt8 bSvtEn;	//!n.a
	SPP_UInt8 bOnlineInfEn;	//!n.a
	SPP_UInt8 bRjEn;	//!n.a
	SPP_UInt8 bVsEn;	//!n.a
	SPP_UInt8 bIcallEn;	//!n.a
	SPP_UInt8 bBcallEn;	//!n.a
	SPP_UInt8 bEcallEn;	//!n.a
	SPP_UInt8 bBdEn;	//!n.a
	SPP_UInt8 bRmtDtcEn;	//!n.a
	SPP_UInt8 bVkEn;	//!n.a
} DcpdPackageDidB200Expand_t;

typedef struct {
	SPP_UInt8 u8CarMd;	//!n.a
	SPP_UInt8 u8BtMd;	//!n.a
	SPP_UInt8 u8CanMd;	//!n.a
	SPP_UInt8 u8NevMd;	//!n.a
	SPP_UInt8 u8SubCarMd;	//!n.a
} DcpdPackageDidC102Expand_t;

typedef struct {
	SPP_Int8 buf[17];
} DcpdPackageChar17;

typedef struct {
	SPP_Int8 buf[6];
} DcpdPackageChar6;

typedef struct {
	SPP_UInt8 buf[14];
} DcpdPackageUChar14;

typedef struct {
	SPP_UInt8 buf[32];
} DcpdPackageUChar32;

typedef struct {
	SPP_UInt8 buf[144];
} DcpdPackageUChar144;

typedef struct {
	SPP_UInt8 buf[176];
} DcpdPackageUChar176;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar17 strVinF190;	//!n.a
	DcpdPackageChar16 strSnF18C;	//!n.a
	DcpdPackageDidB210Expand_t tKeStaB210;	//!n.a
	DcpdPackageChar12 strTboxIdB007;	//!n.a
	DcpdPackageDidB200Expand_t tAppStaB200;	//!n.a
	DcpdPackageChar32 strTspIp;	//!n.a
	DcpdPackageChar32 strSmsNum;	//!n.a
	DcpdPackageChar6 strTspPort;	//!n.a
	DcpdPackageDidC102Expand_t tTboxModelC102;	//!n.a
	DcpdPackageUChar5 u8CA81Data;	//!n.a
	DcpdPackageUChar20 u8CF01Data;	//!n.a
	DcpdPackageUChar14 u8ArrUserId;	//!n.a
	DcpdPackageUChar32 u8ArrTToken;	//!n.a
	DcpdPackageUChar16 u8ArrAesKey;	//!n.a
	DcpdPackageUChar144 u8ArrRootCert;	//!n.a
	DcpdPackageUChar176 u8ArrUsrCert;	//!n.a
	DcpdPackageUChar32 u8ArrPkX;	//!n.a
	DcpdPackageUChar32 u8ArrPkY;	//!n.a
	DcpdPackageUChar32 u8ArrSkY;	//!n.a
	SPP_UInt8 u8Algor;	//!n.a
	SPP_UInt8 u8CertGot;	//!n.a
} DcpdPackageToMpuAcCfgIniData_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar32 strTspIp;	//!n.a
} DcpdPackageToMpuTspIpC007Data_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar32 StrSmsNum;	//!n.a
} DcpdPackageToMpuTspSmsC008Data_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar6 strTspPort;	//!n.a
} DcpdPackageToMpuTspPortC009Data_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar16 strSnF18C;	//!n.a
} DcpdPackageToMpuTboxSnF18CData_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageDidB200Expand_t tAppStaB200;	//!n.a
} DcpdPackageToMpuAppStaB200Data_t;

typedef struct {
	SPP_UInt8 buf[64];
} DcpdPackageUChar64;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageOtaAppDataRvsBasicData_t tBasicVehicleStatus;	//!n.a
	DcpdPackageUChar64 u8ArrAlmSta;	//!n.a
} DcpdPackageToMpuVsData_t;

typedef struct {
	SPP_UInt8 buf[8];
} DcpdPackageUChar8;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageUChar8 AlmIdBitmap;	//!n.a
	SPP_UInt8 AlmDataSize;	//!n.a
	DcpdPackageUChar64 u8ArrAlmData;	//!n.a
} DcpdPackageToMpuAlmData_t;

typedef struct {
	SPP_UInt8 buf[4];
} DcpdPackageUChar4;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt32 u32JourneyId;	//!n.a
	SPP_UInt32 u32KeyId;	//!n.a
	DcpdPackageUChar4 u8RjCfgCA80;	//!n.a
} DcpdPackageToMpuStartRj_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt32 u32ClstrDspdVehSpd;	//!n.a
	SPP_UInt32 u32fuelCsump;	//!n.a
} DcpdPackageToMpuUpdateRj_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt32 u32JourneyDistance;	//!n.a
	SPP_UInt32 u32JourneyAveSpeed;	//!n.a
	SPP_UInt32 u32JourneyFuelEco;	//!n.a
	SPP_UInt32 u32Vehodo;	//!n.a
	SPP_UInt32 u32FuelRange;	//!n.a
	SPP_UInt32 u32FuelLevelprc;	//!n.a
	SPP_UInt32 u32FuelLecelDisp;	//!n.a
} DcpdPackageToMpuEndRj_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar64 strTspApnAddrC001;	//!n.a
} DcpdPackageToMpuTspApnC001Data_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar32 strTspApnUsrC002;	//!n.a
} DcpdPackageToMpuTspApnUsrC002Data_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar32 strTspApnPswC003;	//!n.a
} DcpdPackageToMpuTspApnPswC003Data_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar64 strInfoApnAddrC004;	//!n.a
} DcpdPackageToMpuInfoApnC004Data_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar32 strInfoApnUsrC005;	//!n.a
} DcpdPackageToMpuInfoApnUsrC005Data_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar32 strInfoApnPswC006;	//!n.a
} DcpdPackageToMpuInfoApnPswC006Data_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageDidC102Expand_t tTboxModelC102;	//!n.a
} DcpdPackageToMpuVModelC102Data_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8TrigReason;	//!n.a
} DcpdPackageToMpuStartKeyExchange_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8Result;	//!n.a
} DcpdPackageToMpuKeSaveResult_t;

typedef struct {
	SPP_UInt16 VehSpeed;	//!n.a
	SPP_UInt8 VehSpeedV;	//!n.a
	SPP_UInt8 VehSysPwrMod;	//!n.a
	SPP_UInt8 VehSysPwrModV;	//!n.a
	SPP_UInt8 VehGearPos;	//!n.a
	SPP_UInt8 VehGearPosV;	//!n.a
} DcpdPackageChannel03_ST;

typedef struct {
	SPP_Int16 TboxAccelX;	//!n.a
	SPP_Int16 TboxAccelY;	//!n.a
	SPP_Int16 TboxAccelZ;	//!n.a
	SPP_UInt8 VehAccelPos;	//!n.a
	SPP_UInt8 VehAccelPosV;	//!n.a
	SPP_UInt8 VehBrakePos;	//!n.a
	SPP_UInt8 VehBrakePosV;	//!n.a
	SPP_UInt16 VehSteeringAngle;	//!n.a
	SPP_UInt8 VehSteeringAngleV;	//!n.a
	SPP_UInt32 vehFuelConsumed;	//!n.a
} DcpdPackageChannel04_ST;

typedef struct {
	SPP_UInt8 VehDoorFrontPas;	//!n.a
	SPP_UInt8 VehDoorFrontDrv;	//!n.a
	SPP_UInt8 VehDoorRearLeft;	//!n.a
	SPP_UInt8 VehDoorRearRight;	//!n.a
} DcpdPackageChannel05_ST;

typedef struct {
	SPP_UInt8 VehBonnet;	//!n.a
	SPP_UInt8 VehBoot;	//!n.a
} DcpdPackageChannel06_ST;

typedef struct {
	SPP_UInt8 VehWindowFrontLeft;	//!n.a
	SPP_UInt8 VehWindowRearLeft;	//!n.a
	SPP_UInt8 VehWindowFrontRight;	//!n.a
	SPP_UInt8 VehWindowRearRight;	//!n.a
	SPP_UInt8 VehSunroof;	//!n.a
} DcpdPackageChannel07_ST;

typedef struct {
	SPP_UInt8 VehCruiseActive;	//!n.a
	SPP_UInt8 VehCruiseEnabled;	//!n.a
	SPP_UInt16 VehCruiseTargetSpeed;	//!n.a
} DcpdPackageChannel08_ST;

typedef struct {
	SPP_UInt8 VehOutsideTemp;	//!n.a
	SPP_UInt8 VehOutsideTempV;	//!n.a
	SPP_UInt8 VehInsideTemp;	//!n.a
} DcpdPackageChannel09_ST;

typedef struct {
	SPP_UInt8 VehAC;	//!n.a
	SPP_UInt8 VehACAuto;	//!n.a
	SPP_UInt8 VehACCircDirection;	//!n.a
	SPP_UInt8 VehACCircType;	//!n.a
	SPP_UInt8 VehACFanSpeed;	//!n.a
	SPP_UInt8 VehACDrvTargetTemp;	//!n.a
	SPP_UInt8 VehACPassTargetTemp;	//!n.a
} DcpdPackageChannel10_ST;

typedef struct {
	SPP_UInt8 VehSeatBeltDrv;	//!n.a
	SPP_UInt8 VehSeatBeltDrvV;	//!n.a
	SPP_UInt8 VehSeatBeltPas;	//!n.a
	SPP_UInt8 VehSeatBeltPasV;	//!n.a
} DcpdPackageChannel11_ST;

typedef struct {
	SPP_UInt8 VehIndLightLeft;	//!n.a
	SPP_UInt8 VehIndLightRight;	//!n.a
} DcpdPackageChannel12_ST;

typedef struct {
	SPP_UInt8 VehSideLight;	//!n.a
	SPP_UInt8 VehDipLight;	//!n.a
	SPP_UInt8 VehMainLight;	//!n.a
	SPP_UInt8 VehFogLightFront;	//!n.a
	SPP_UInt8 VehFogLightRear;	//!n.a
} DcpdPackageChannel13_ST;

typedef struct {
	SPP_UInt8 VehWiperSwitchFront;	//!n.a
	SPP_UInt8 vehRainDetected;	//!n.a
	SPP_UInt8 VehNightDetected;	//!n.a
} DcpdPackageChannel14_ST;

typedef struct {
	SPP_UInt16 vehFuelLev;	//!n.a
	SPP_UInt16 vehBatt;	//!n.a
	SPP_Int16 vehCoolantTemp;	//!n.a
	SPP_UInt32 vehOdo;	//!n.a
	SPP_UInt32 vehDistRollCount;	//!n.a
} DcpdPackageChannel15_ST;

typedef struct {
	SPP_UInt8 VehHorn;	//!n.a
} DcpdPackageChannel16_ST;

typedef struct {
	SPP_UInt8 vehOilPressureWarning;	//!n.a
	SPP_UInt8 vehMILWarning;	//!n.a
	SPP_UInt8 vehDriveByWireWarning;	//!n.a
} DcpdPackageChannel17_ST;

typedef struct {
	DcpdPackageChannel03_ST channel3;	//!n.a
	DcpdPackageChannel04_ST channel4;	//!n.a
	DcpdPackageChannel05_ST channel5;	//!n.a
	DcpdPackageChannel06_ST channel6;	//!n.a
	DcpdPackageChannel07_ST channel7;	//!n.a
	DcpdPackageChannel08_ST channel8;	//!n.a
	DcpdPackageChannel09_ST channel9;	//!n.a
	DcpdPackageChannel10_ST channel10;	//!n.a
	DcpdPackageChannel11_ST channel11;	//!n.a
	DcpdPackageChannel12_ST channel12;	//!n.a
	DcpdPackageChannel13_ST channel13;	//!n.a
	DcpdPackageChannel14_ST channel14;	//!n.a
	DcpdPackageChannel15_ST channel15;	//!n.a
	DcpdPackageChannel16_ST channel16;	//!n.a
	DcpdPackageChannel17_ST channel17;	//!n.a
} DcpdPackageToMpuBDChannel_t;

typedef struct {
	SPP_UInt8 VehAirBagDpl;	//!n.a
	SPP_UInt8 VehTyrePrsFlt;	//!n.a
	SPP_UInt16 VehRPM;	//!n.a
} DcpdPackageToMpuBDEvent_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageToMpuBDChannel_t bddata;	//!n.a
	DcpdPackageToMpuBDEvent_t bddata_E;	//!n.a
} DcpdPackageToMpuBdInfo_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 PowerMode;	//!n.a
	SPP_UInt8 u8BattVoltOperASta;	//!n.a
	SPP_UInt8 u8BattVoltOperCANASta;	//!n.a
	SPP_UInt8 u8BattVoltOperDiagASta;	//!n.a
	SPP_UInt8 u8KeySta;	//!n.a
} DcpdPackageToMpuPmStatusUpdate_t;

typedef struct {
	SPP_UInt8 buf[508];
} DcpdPackageUChar508;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageUChar508 Data;	//!n.a
} DcpdPackageToMcuCfgSaveReq_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8SimSta;	//!n.a
	SPP_UInt8 u8SimFltSta;	//!n.a
	SPP_UInt32 u32SimExtInfo;	//!n.a
} DcpdPackageToMcuSimSta_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt32 u32DcpdReqId;	//!n.a
	DcpdPackageOtaDispatcherBody_t tDispBody;	//!n.a
	DcpdPackageUChar4 u8AppDataArr;	//!n.a
} DcpdPackageToMpuBtcOtaMsgTx_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageOtaDispatcherBody_t tDispBody;	//!n.a
	DcpdPackageUChar64 u8ArrAppData;	//!n.a
} DcpdPackageToMcuBtcOtaMsgRx_t;

typedef struct {
	SPP_UInt8 buf[15];
} DcpdPackageUChar15;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar3 strMcc2;	//!n.a
	DcpdPackageChar3 strMnc2;	//!n.a
	DcpdPackageUChar15 u8ArrBkpNum;	//!n.a
	DcpdPackageUChar15 u8ArrPsapNum;	//!n.a
	SPP_UInt8 u8TspCheck;	//!n.a
	SPP_UInt8 u8CallType;	//!n.a
	SPP_UInt8 u8bCallCallbackTimer;	//!n.a
	SPP_UInt16 u16TboxBatVolt;	//!n.a
	SPP_UInt16 u16VehBatVolt;	//!n.a
	SPP_UInt8 u8AClassVoltSta;	//!n.a
	SPP_UInt8 bDTC953311Sta;	//!n.a
	SPP_UInt8 bDTC953313Sta;	//!n.a
	SPP_UInt8 bDTC953411Sta;	//!n.a
	SPP_UInt8 bDTC953413Sta;	//!n.a
	SPP_UInt8 u8KeySta;	//!n.a
} DcpdPackageToMputCallCfg_t;

typedef struct {
	SPP_UInt8 u8KeyType;	//!n.a
	DcpdPackageUChar16 u8ArrSecKeyVal;	//!n.a
	DcpdPackageUChar16 u8ArrAesKeyVal;	//!n.a
	SPP_UInt32 u32KeyRef;	//!n.a
	SPP_UInt32 u32CustRef;	//!n.a
	SPP_UInt32 u32KeyValStartTime;	//!n.a
} DcpdPackageOtaAppDataRemoteKeyWriteReq_t;

typedef struct {
	SPP_UInt8 u8Bitmap;	//!n.a
	SPP_UInt8 bWrSuccess;	//!n.a
	SPP_UInt8 u8FailReason;	//!n.a
} DcpdPackageOtaAppDataRemoteKeyWriteRes_t;

typedef struct {
	SPP_UInt32 u32KeyRef;	//!n.a
} DcpdPackageOtaAppDataRemoteKeyDeleteReq_t;

typedef struct {
	SPP_UInt8 u8Bitmap;	//!n.a
	SPP_UInt8 bDelSuccess;	//!n.a
	SPP_UInt8 u8FailReason;	//!n.a
} DcpdPackageOtaAppDataRemoteKeyDeleteRes_t;

typedef struct {
	SPP_UInt32 u32KeyRef;	//!n.a
} DcpdPackageOtaAppDataRemoteKeyAlarm_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8WanConnectState;	//!n.a
	DcpdPackageUChar16 u8PublicIp;	//!n.a
	SPP_UInt8 u8Csq;	//!n.a
} DcpdPackageEolWanConnInfo_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8FixStatus;	//!n.a
	SPP_Int32 i32Longitude;	//!n.a
	SPP_Int32 i32Latitude;	//!n.a
	DcpdPackageUChar12 u8TimeStamp;	//!n.a
} DcpdPackageEolGnssInfo_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageUChar8 tDataBuff;	//!n.a
} DcpdPackageEolUartInfo_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8State;	//!n.a
} DcpdPackageEolPingInfo_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8Apn16Sta;	//!n.a
	SPP_UInt8 u8WkpCnt1;	//!n.a
	SPP_UInt8 u8WkpCnt2;	//!n.a
} DcpdPackageToMcuApnSta_t;

typedef struct {
	SPP_UInt8 buf[7];
} DcpdPackageUChar7;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt32 u32DcpdReqId;	//!n.a
	SPP_UInt16 u16CanID;	//!n.a
	DcpdPackageUChar7 u8ArrDiagRspMsg;	//!n.a
} DcpdPackageToMpuDTCReportReq_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8TrgSrc;	//!n.a
} DcpdPackageToMpuFotaChkReq_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageUChar17 u8ArrVin;	//!n.a
	DcpdPackageUChar16 u8ArrAesKey;	//!n.a
	SPP_UInt16 u16DIDC000FotaMinBattVolt;	//!n.a
	SPP_UInt16 u16DIDC000FotaMinBattSOC;	//!n.a
	SPP_UInt16 u16DIDC000FireWallCanId;	//!n.a
	SPP_UInt8 u8FireWallUsing;	//!n.a
	SPP_UInt8 u8ExtDigToolMoniterEn;	//!n.a
	SPP_UInt8 u8DTCTrigEn;	//!n.a
	SPP_UInt8 u8RmtDiagEn;	//!n.a
	SPP_UInt8 u8FOTAEn;	//!n.a
	DcpdPackageUChar12 u8ArrTboxId;	//!n.a
	SPP_UInt8 u8AppMode;	//!n.a
	DcpdPackageUChar144 u8ArrRootCert;	//!n.a
	DcpdPackageUChar176 u8ArrUsrCert;	//!n.a
	DcpdPackageUChar32 u8ArrPkX;	//!n.a
	DcpdPackageUChar32 u8ArrPkY;	//!n.a
	DcpdPackageUChar32 u8ArrSkY;	//!n.a
	SPP_UInt8 u8Algor;	//!n.a
	SPP_UInt8 u8CertGot;	//!n.a
} DcpdPackageToMpuFotaCfgResp_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8Can1NwSta;	//!n.a
	SPP_UInt8 u8Can2NwSta;	//!n.a
} DcpdPackageToMpuFotaWkpCanNwResp_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8McuChkResult;	//!n.a
	SPP_UInt16 u16Vspd;	//!n.a
	SPP_UInt8 u8ShiftLvr;	//!n.a
	SPP_UInt8 u8EngRun;	//!n.a
	SPP_UInt8 u8MotCmddOn;	//!n.a
	SPP_UInt8 u8ExtDiagToolSta;	//!n.a
	SPP_UInt8 u8BattVoltOperASta;	//!n.a
	SPP_UInt8 u8DTCD50062;	//!n.a
	SPP_UInt8 u8KeySta;	//!n.a
	SPP_UInt16 u16SOC;	//!n.a
} DcpdPackageToMpuFotaCondChkResp_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8McuChkResult;	//!n.a
	SPP_UInt16 u16Vspd;	//!n.a
	SPP_UInt8 u8EngRun;	//!n.a
	SPP_UInt8 u8ExtDiagToolSta;	//!n.a
	SPP_UInt8 u8BattVoltOperASta;	//!n.a
	SPP_UInt8 u8DTCD50062;	//!n.a
	SPP_UInt8 u8KeySta;	//!n.a
	SPP_UInt8 u8TboxActiveSta;	//!n.a
	SPP_UInt8 u8RDiagEn;	//!n.a
} DcpdPackageToMpuRDiagCondChkResp_t;

typedef struct {
	SPP_UInt8 buf[255];
} DcpdPackageUChar255;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8ExtFailReason;	//!n.a
	SPP_UInt16 u16CanID;	//!n.a
	SPP_UInt16 u16CanRespMsgLen;	//!n.a
	DcpdPackageUChar255 u8ArrDiagRspMsg;	//!n.a
} DcpdPackageToMpuRDiagResp_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8ReqType;	//!n.a
} DcpdPackageToMcuFotaWkpCanNwReq_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8ReqSrc;	//!n.a
	SPP_UInt16 u16CanID;	//!n.a
	SPP_UInt16 u16DiagMsgLen;	//!n.a
	DcpdPackageUChar255 u8ArrDiagMsg;	//!n.a
} DcpdPackageToMcuRDiagReq_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageUChar176 u8ArrUsrCert;	//!n.a
	DcpdPackageUChar32 u8ArrPkX;	//!n.a
	DcpdPackageUChar32 u8ArrPkY;	//!n.a
	DcpdPackageUChar32 u8ArrSkY;	//!n.a
	SPP_UInt8 u8CertSta;	//!n.a
	SPP_UInt8 u8FailReason;	//!n.a
} DcpdPackageToMcuSaveCertReq_t;

typedef struct {
	SPP_UInt8 buf[200];
} DcpdPackageUChar200;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt16 u16Cmd;	//!n.a
	DcpdPackageUChar200 u8ArrPara;	//!n.a
} DcpdPackageToMcuEolCmdResp_t;

typedef struct {
	SPP_UInt8 u8Sta;	//!n.a
} DcpdPackageToMcuEolSleepSigResp_t;

typedef struct {
	SPP_UInt8 u8Sta;	//!n.a
} DcpdPackageToMcuEolWakeupSigResp_t;

typedef struct {
	SPP_UInt8 u8Sta;	//!n.a
} DcpdPackageToMcuEolWakeupMcuResp_t;

typedef struct {
	SPP_UInt8 u8Sta;	//!n.a
} DcpdPackageToMcuEolOpenAudioLpResp_t;

typedef struct {
	SPP_UInt8 u8Sta;	//!n.a
} DcpdPackageToMcuEolCloseAudioLpResp_t;

typedef struct {
	SPP_UInt8 u8Sta;	//!n.a
} DcpdPackageToMcuEolSimStaResp_t;

typedef struct {
	SPP_UInt8 buf[21];
} DcpdPackageUChar21;

typedef struct {
	SPP_UInt8 buf[33];
} DcpdPackageUChar33;

typedef struct {
	SPP_UInt8 u8IccidLen;	//!n.a
	DcpdPackageUChar21 u8ArrIccid;	//!n.a
	SPP_UInt8 u8ImeiLen;	//!n.a
	DcpdPackageUChar33 u8ArrImei;	//!n.a
	SPP_UInt8 u8ImsiLen;	//!n.a
	DcpdPackageUChar33 u8ArrImsi;	//!n.a
	SPP_UInt8 u8MeidLen;	//!n.a
	DcpdPackageUChar33 u8ArrMeid;	//!n.a
	SPP_UInt8 u8SimPhNoLen;	//!n.a
	DcpdPackageUChar33 u8ArrSimPhNo;	//!n.a
} DcpdPackageToMcuEol5CodeResp_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt32 u32MpuSysTime;	//!n.a
} DcpdPackageToMcuSysTimeOfMpu_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt32 u32ReqId;	//!n.a
} DcpdPackageToMcuRcOtaTxAck_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt32 u32ReqId;	//!n.a
} DcpdPackageToMcuBtcOtaTxAck_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt32 u32ReqId;	//!n.a
} DcpdPackageToMcuDtcOtaTxAck_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageUChar144 u8ArrRootCert;	//!n.a
	DcpdPackageUChar176 u8ArrUsrCert;	//!n.a
	DcpdPackageUChar32 u8ArrPkX;	//!n.a
	DcpdPackageUChar32 u8ArrPkY;	//!n.a
	DcpdPackageUChar32 u8ArrSkY;	//!n.a
	SPP_UInt8 u8Algor;	//!n.a
} DcpdPackageToMpuCertUpdReq_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8Result;	//!n.a
} DcpdPackageToMpuCertSaveResult_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt16 u16Cmd;	//!n.a
	DcpdPackageUChar200 u8ArrPara;	//!n.a
} DcpdPackageToMpuEolCmdReq_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8StartStop;	//!n.a
} DcpdPackageToMpuBdAppStartStopInfo_t;

typedef struct {
	SPP_UInt8 buf[504];
} DcpdPackageUChar504;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt16 u16EventNum;	//!n.a
	DcpdPackageUChar504 u8ArrData;	//!n.a
} DcpdPackageToMpuBdAppEventData_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt32 u32McuSysTime;	//!n.a
} DcpdPackageToMpuSysTimeOfMcu_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt32 u32EventID;	//!n.a
} DcpdPackageToMpuRxRcOtaAck_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt32 u32EventID;	//!n.a
} DcpdPackageToMpuRxBtcOtaAck_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8Type;	//!n.a
} DcpdPackageToMcuResetTboxReq_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8PowerMode;	//!n.a
} DcpdPackageToMpuFotaAppKeyStaInd_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8ReqCmd;	//!n.a
} DcpdPackageToMpuFotaAppUdiskUpdReq_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar10 strEcuSwVerF194;	//!n.a
	DcpdPackageChar20 strBleSwVerB003;	//!n.a
	DcpdPackageChar24 strMpuSwVerB000;	//!n.a
	DcpdPackageChar24 strNadSwVerB005;	//!n.a
} DcpdPackageToMpuAvnSrvVerResp_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	DcpdPackageChar12 strBleMacAddr;	//!n.a
	DcpdPackageChar5 strCfgBaseF1A1;	//!n.a
	DcpdPackageUChar12 u8ArrCfgDelta;	//!n.a
	DcpdPackageChar10 strEcuSwVerF194;	//!n.a
	DcpdPackageChar20 strBleSwVerB003;	//!n.a
	DcpdPackageChar24 strMpuSwVerB000;	//!n.a
	DcpdPackageChar24 strNadSwVerB005;	//!n.a
	DcpdPackageChar32 strTspIp;	//!n.a
	DcpdPackageChar6 strTspPort;	//!n.a
} DcpdPackageToMpuFotaVerResp_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8Cmd;	//!n.a
	SPP_UInt8 u8Para;	//!n.a
} DcpdPackageToMcuDiagUdiskUpdResp_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8Status;	//!n.a
	SPP_UInt8 u8FailReason;	//!n.a
	SPP_UInt8 u8Process;	//!n.a
} DcpdPackageToMcuDiagUdiskUpdSta_t;

typedef struct {
	SPP_UInt8 u8Result;	//!n.a
} DcpdPackageToMcuEolEnterFlightModeResp_t;

typedef struct {
	SPP_UInt8 u8Result;	//!n.a
} DcpdPackageToMcuEolExitFlightModeResp_t;

typedef struct {
	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt8 u8Result;	//!n.a
} DcpdPackageToMcuEnterDevMdResp_t;


typedef struct {
	SPP_UInt8 buf[9];
} DcpdPackageUChar128;
typedef struct {
//	DcpdPackageHeader_t tHeader;	//!n.a
	SPP_UInt16 u16Cmd;	//!n.a
	SPP_UInt8 u8Len;	//!n.a
	DcpdPackageUChar128 u8Data;	//!n.a
} DcpdPackageFBLCom_t;
#pragma pack()

/**
 *  Initialize function
 */
SPP_BOOL SPP_Init(void);

/**
 *  Start function
 */
SPP_BOOL SPP_Start(void);

/**
 *  Stop function
 */
SPP_BOOL SPP_Stop(void);

/**
 *  Main_Task function
 */
SPP_BOOL SPP_Main_Task(void);

/**
 *  Sleep function
 */
SPP_BOOL SPP_Sleep(void);

/**
 *  Wakeup function
 */
SPP_BOOL SPP_Wakeup(void);


/**
 *  Set log level
 */
SPP_BOOL SPP_SetLogLevel(SPP_LOGLEVEL ll);

/**
 *  Invoked when logging
 */
SPP_BOOL SPP_SetLoggingListener(SPP_Logging_Callback cb);

/**
 *  Invoked when an event is acknowledged
 */
SPP_BOOL SPP_Add_EventAck_Listener(SPP_UInt16 event_id, SPP_UserEventAck_Callback cb);

/**
 *  Invoked when an event is acknowledged error
 */
SPP_BOOL SPP_Add_EventAckError_Listener(SPP_UInt16 event_id, SPP_UserEventAckError_Callback cb);

/**
 *  Invoked when any event is received
 */
SPP_BOOL SPP_Add_EventRecv_Listener(SPP_EventRecv_Callback cb);

/**
 *  Set and Clear Flag
 */
SPP_BOOL SPP_TestFlag(SPP_UInt16 event_id);
void SPP_ClearFlag(SPP_UInt16 event_id);

/**
 *  Deinitialize function
 */
SPP_BOOL SPP_DeInit(void);

/**
 *  Get Status
 */
SppState_ENUM SPP_GetState(void);

/**
 *  Receive Event Interface
 */
typedef void (*SPP_DCPD_MSG_TO_MCU_APN_CFG_REQ_Callback)(SPP_UInt16 event_id, DcpdPackageHeader_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_APN_CFG_REQ_Event_Listener(SPP_DCPD_MSG_TO_MCU_APN_CFG_REQ_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_APN_CFG_REQ_Event(DcpdPackageHeader_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_IMEI_B004_RESP_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuImei_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_IMEI_B004_RESP_Event_Listener(SPP_DCPD_MSG_TO_MCU_IMEI_B004_RESP_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_IMEI_B004_RESP_Event(DcpdPackageToMcuImei_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_GNSS_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuGnss_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_GNSS_Event_Listener(SPP_DCPD_MSG_TO_MCU_GNSS_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_GNSS_Event(DcpdPackageToMcuGnss_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_ICCID_B001_RESP_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuIccid_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_ICCID_B001_RESP_Event_Listener(SPP_DCPD_MSG_TO_MCU_ICCID_B001_RESP_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_ICCID_B001_RESP_Event(DcpdPackageToMcuIccid_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_NadSta1_B180_RESP_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuMccMncB180_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_NadSta1_B180_RESP_Event_Listener(SPP_DCPD_MSG_TO_MCU_NadSta1_B180_RESP_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_NadSta1_B180_RESP_Event(DcpdPackageToMcuMccMncB180_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_NadSta2_B181_RESP_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuNadStaB181_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_NadSta2_B181_RESP_Event_Listener(SPP_DCPD_MSG_TO_MCU_NadSta2_B181_RESP_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_NadSta2_B181_RESP_Event(DcpdPackageToMcuNadStaB181_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_NADIP1_B182_RESP_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuNadIp1B182_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_NADIP1_B182_RESP_Event_Listener(SPP_DCPD_MSG_TO_MCU_NADIP1_B182_RESP_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_NADIP1_B182_RESP_Event(DcpdPackageToMcuNadIp1B182_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_NADIP2_B183_RESP_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuNadIp2B183_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_NADIP2_B183_RESP_Event_Listener(SPP_DCPD_MSG_TO_MCU_NADIP2_B183_RESP_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_NADIP2_B183_RESP_Event(DcpdPackageToMcuNadIp2B183_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_RC_OTA_MSG_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuRcMid1OtaMsgRx_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_RC_OTA_MSG_Event_Listener(SPP_DCPD_MSG_TO_MCU_RC_OTA_MSG_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_RC_OTA_MSG_Event(DcpdPackageToMcuRcMid1OtaMsgRx_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_BTC_OTA_MSG_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuBtcOtaMsgRx_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_BTC_OTA_MSG_Event_Listener(SPP_DCPD_MSG_TO_MCU_BTC_OTA_MSG_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_BTC_OTA_MSG_Event(DcpdPackageToMcuBtcOtaMsgRx_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_RC_OTA_TX_RESULT_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuOtaTxResult_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_RC_OTA_TX_RESULT_Event_Listener(SPP_DCPD_MSG_TO_MCU_RC_OTA_TX_RESULT_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_RC_OTA_TX_RESULT_Event(DcpdPackageToMcuOtaTxResult_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_BTC_OTA_TX_RESULT_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuOtaTxResult_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_BTC_OTA_TX_RESULT_Event_Listener(SPP_DCPD_MSG_TO_MCU_BTC_OTA_TX_RESULT_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_BTC_OTA_TX_RESULT_Event(DcpdPackageToMcuOtaTxResult_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_AC_CFG_VER_REQ_Callback)(SPP_UInt16 event_id, DcpdPackageHeader_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_AC_CFG_VER_REQ_Event_Listener(SPP_DCPD_MSG_TO_MCU_AC_CFG_VER_REQ_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_AC_CFG_VER_REQ_Event(DcpdPackageHeader_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_AC_CFG_SAVE_REQ_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuCfgSaveReq_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_AC_CFG_SAVE_REQ_Event_Listener(SPP_DCPD_MSG_TO_MCU_AC_CFG_SAVE_REQ_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_AC_CFG_SAVE_REQ_Event(DcpdPackageToMcuCfgSaveReq_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_VS_DATA_REQ_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuVsReq_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_VS_DATA_REQ_Event_Listener(SPP_DCPD_MSG_TO_MCU_VS_DATA_REQ_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_VS_DATA_REQ_Event(DcpdPackageToMcuVsReq_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_AC_INI_CFG_REQ_Callback)(SPP_UInt16 event_id, DcpdPackageHeader_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_AC_INI_CFG_REQ_Event_Listener(SPP_DCPD_MSG_TO_MCU_AC_INI_CFG_REQ_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_AC_INI_CFG_REQ_Event(DcpdPackageHeader_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_NAD_SW_VER_B005_RESP_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuNadSwVerB005_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_NAD_SW_VER_B005_RESP_Event_Listener(SPP_DCPD_MSG_TO_MCU_NAD_SW_VER_B005_RESP_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_NAD_SW_VER_B005_RESP_Event(DcpdPackageToMcuNadSwVerB005_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_NAD_HW_VER_B006_RESP_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuNadHwVerB006_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_NAD_HW_VER_B006_RESP_Event_Listener(SPP_DCPD_MSG_TO_MCU_NAD_HW_VER_B006_RESP_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_NAD_HW_VER_B006_RESP_Event(DcpdPackageToMcuNadHwVerB006_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_MPUSW_VER_F1B5_RESP_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuMpuSwVerF1B5_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_MPUSW_VER_F1B5_RESP_Event_Listener(SPP_DCPD_MSG_TO_MCU_MPUSW_VER_F1B5_RESP_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_MPUSW_VER_F1B5_RESP_Event(DcpdPackageToMcuMpuSwVerF1B5_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_MPUSUPSW_VER_B000_RESP_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuMpuSupSwVerB000_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_MPUSUPSW_VER_B000_RESP_Event_Listener(SPP_DCPD_MSG_TO_MCU_MPUSUPSW_VER_B000_RESP_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_MPUSUPSW_VER_B000_RESP_Event(DcpdPackageToMcuMpuSupSwVerB000_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_RESET_TBOX_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuResetTboxReq_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_RESET_TBOX_Event_Listener(SPP_DCPD_MSG_TO_MCU_RESET_TBOX_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_RESET_TBOX_Event(DcpdPackageToMcuResetTboxReq_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_UPDATE_KE_STA_B210_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuUpdateKeStaB210_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_UPDATE_KE_STA_B210_Event_Listener(SPP_DCPD_MSG_TO_MCU_UPDATE_KE_STA_B210_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_UPDATE_KE_STA_B210_Event(DcpdPackageToMcuUpdateKeStaB210_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_SAVE_KE_RESULT_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuSaveKeResult_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_SAVE_KE_RESULT_Event_Listener(SPP_DCPD_MSG_TO_MCU_SAVE_KE_RESULT_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_SAVE_KE_RESULT_Event(DcpdPackageToMcuSaveKeResult_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_IS_SLEEP_READY_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuSleepReady_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_IS_SLEEP_READY_Event_Listener(SPP_DCPD_MSG_TO_MCU_IS_SLEEP_READY_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_IS_SLEEP_READY_Event(DcpdPackageToMcuSleepReady_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_PM_CHANGE_END_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuPmChangeEnd_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_PM_CHANGE_END_Event_Listener(SPP_DCPD_MSG_TO_MCU_PM_CHANGE_END_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_PM_CHANGE_END_Event(DcpdPackageToMcuPmChangeEnd_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_VERSION_SYNC_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuVerOfMpu_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_VERSION_SYNC_Event_Listener(SPP_DCPD_MSG_TO_MCU_VERSION_SYNC_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_VERSION_SYNC_Event(DcpdPackageToMcuVerOfMpu_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_SIM_STA_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuSimSta_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_SIM_STA_Event_Listener(SPP_DCPD_MSG_TO_MCU_SIM_STA_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_SIM_STA_Event(DcpdPackageToMcuSimSta_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_TCALL_CFG_REQ_Callback)(SPP_UInt16 event_id, DcpdPackageHeader_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_TCALL_CFG_REQ_Event_Listener(SPP_DCPD_MSG_TO_MCU_TCALL_CFG_REQ_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_TCALL_CFG_REQ_Event(DcpdPackageHeader_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_FOTA_CFG_REQ_Callback)(SPP_UInt16 event_id, DcpdPackageHeader_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_FOTA_CFG_REQ_Event_Listener(SPP_DCPD_MSG_TO_MCU_FOTA_CFG_REQ_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_FOTA_CFG_REQ_Event(DcpdPackageHeader_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_FOTA_WAKEUPCAN_REQ_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuFotaWkpCanNwReq_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_FOTA_WAKEUPCAN_REQ_Event_Listener(SPP_DCPD_MSG_TO_MCU_FOTA_WAKEUPCAN_REQ_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_FOTA_WAKEUPCAN_REQ_Event(DcpdPackageToMcuFotaWkpCanNwReq_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_FOTA_CHK_REQ_Callback)(SPP_UInt16 event_id, DcpdPackageHeader_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_FOTA_CHK_REQ_Event_Listener(SPP_DCPD_MSG_TO_MCU_FOTA_CHK_REQ_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_FOTA_CHK_REQ_Event(DcpdPackageHeader_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_RDIAG_CHK_REQ_Callback)(SPP_UInt16 event_id, DcpdPackageHeader_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_RDIAG_CHK_REQ_Event_Listener(SPP_DCPD_MSG_TO_MCU_RDIAG_CHK_REQ_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_RDIAG_CHK_REQ_Event(DcpdPackageHeader_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_RDIAG_REQ_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuRDiagReq_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_RDIAG_REQ_Event_Listener(SPP_DCPD_MSG_TO_MCU_RDIAG_REQ_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_RDIAG_REQ_Event(DcpdPackageToMcuRDiagReq_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_APN_STA_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuApnSta_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_APN_STA_Event_Listener(SPP_DCPD_MSG_TO_MCU_APN_STA_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_APN_STA_Event(DcpdPackageToMcuApnSta_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_AC_CERT_UPD_ACK_Callback)(SPP_UInt16 event_id, DcpdPackageHeader_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_AC_CERT_UPD_ACK_Event_Listener(SPP_DCPD_MSG_TO_MCU_AC_CERT_UPD_ACK_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_AC_CERT_UPD_ACK_Event(DcpdPackageHeader_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_AC_CERT_UPD_STA_INFO_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuSaveCertReq_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_AC_CERT_UPD_STA_INFO_Event_Listener(SPP_DCPD_MSG_TO_MCU_AC_CERT_UPD_STA_INFO_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_AC_CERT_UPD_STA_INFO_Event(DcpdPackageToMcuSaveCertReq_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_BD_START_STOP_ACK_Callback)(SPP_UInt16 event_id, DcpdPackageHeader_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_BD_START_STOP_ACK_Event_Listener(SPP_DCPD_MSG_TO_MCU_BD_START_STOP_ACK_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_BD_START_STOP_ACK_Event(DcpdPackageHeader_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_DIAG_UDISK_UPD_ACK_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuDiagUdiskUpdResp_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_DIAG_UDISK_UPD_ACK_Event_Listener(SPP_DCPD_MSG_TO_MCU_DIAG_UDISK_UPD_ACK_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_DIAG_UDISK_UPD_ACK_Event(DcpdPackageToMcuDiagUdiskUpdResp_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_DIAG_UDISK_UPD_SAT_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuDiagUdiskUpdSta_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_DIAG_UDISK_UPD_SAT_Event_Listener(SPP_DCPD_MSG_TO_MCU_DIAG_UDISK_UPD_SAT_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_DIAG_UDISK_UPD_SAT_Event(DcpdPackageToMcuDiagUdiskUpdSta_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_SYS_TIME_REQ_Callback)(SPP_UInt16 event_id, DcpdPackageHeader_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_SYS_TIME_REQ_Event_Listener(SPP_DCPD_MSG_TO_MCU_SYS_TIME_REQ_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_SYS_TIME_REQ_Event(DcpdPackageHeader_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_SYS_TIME_RESP_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuSysTimeOfMpu_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_SYS_TIME_RESP_Event_Listener(SPP_DCPD_MSG_TO_MCU_SYS_TIME_RESP_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_SYS_TIME_RESP_Event(DcpdPackageToMcuSysTimeOfMpu_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_RC_OTA_MSG_ACK_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuRcOtaTxAck_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_RC_OTA_MSG_ACK_Event_Listener(SPP_DCPD_MSG_TO_MCU_RC_OTA_MSG_ACK_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_RC_OTA_MSG_ACK_Event(DcpdPackageToMcuRcOtaTxAck_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_BTC_OTA_MSG_ACK_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuBtcOtaTxAck_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_BTC_OTA_MSG_ACK_Event_Listener(SPP_DCPD_MSG_TO_MCU_BTC_OTA_MSG_ACK_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_BTC_OTA_MSG_ACK_Event(DcpdPackageToMcuBtcOtaTxAck_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_DTC_REPORT_ACK_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuDtcOtaTxAck_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_DTC_REPORT_ACK_Event_Listener(SPP_DCPD_MSG_TO_MCU_DTC_REPORT_ACK_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_DTC_REPORT_ACK_Event(DcpdPackageToMcuDtcOtaTxAck_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_START_AC_ACK_Callback)(SPP_UInt16 event_id, DcpdPackageHeader_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_START_AC_ACK_Event_Listener(SPP_DCPD_MSG_TO_MCU_START_AC_ACK_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_START_AC_ACK_Event(DcpdPackageHeader_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_USER_ID_ACK_Callback)(SPP_UInt16 event_id, DcpdPackageHeader_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_USER_ID_ACK_Event_Listener(SPP_DCPD_MSG_TO_MCU_USER_ID_ACK_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_USER_ID_ACK_Event(DcpdPackageHeader_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_CLR_ALM_REQ_ACK_Callback)(SPP_UInt16 event_id, DcpdPackageHeader_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_CLR_ALM_REQ_ACK_Event_Listener(SPP_DCPD_MSG_TO_MCU_CLR_ALM_REQ_ACK_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_CLR_ALM_REQ_ACK_Event(DcpdPackageHeader_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_ALM_REQ_ACK_Callback)(SPP_UInt16 event_id, DcpdPackageHeader_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_ALM_REQ_ACK_Event_Listener(SPP_DCPD_MSG_TO_MCU_ALM_REQ_ACK_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_ALM_REQ_ACK_Event(DcpdPackageHeader_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_START_RJ_ACK_Callback)(SPP_UInt16 event_id, DcpdPackageHeader_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_START_RJ_ACK_Event_Listener(SPP_DCPD_MSG_TO_MCU_START_RJ_ACK_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_START_RJ_ACK_Event(DcpdPackageHeader_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_END_RJ_ACK_Callback)(SPP_UInt16 event_id, DcpdPackageHeader_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_END_RJ_ACK_Event_Listener(SPP_DCPD_MSG_TO_MCU_END_RJ_ACK_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_END_RJ_ACK_Event(DcpdPackageHeader_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_AVNSRV_VER_REQ_Callback)(SPP_UInt16 event_id, DcpdPackageHeader_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_AVNSRV_VER_REQ_Event_Listener(SPP_DCPD_MSG_TO_MCU_AVNSRV_VER_REQ_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_AVNSRV_VER_REQ_Event(DcpdPackageHeader_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_DIAG_FOTA_VER_REQ_Callback)(SPP_UInt16 event_id, DcpdPackageHeader_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_DIAG_FOTA_VER_REQ_Event_Listener(SPP_DCPD_MSG_TO_MCU_DIAG_FOTA_VER_REQ_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_DIAG_FOTA_VER_REQ_Event(DcpdPackageHeader_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_UPGRADE_ACK_Callback)(SPP_UInt16 event_id, DcpdPackageHeader_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_UPGRADE_ACK_Event_Listener(SPP_DCPD_MSG_TO_MCU_UPGRADE_ACK_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_UPGRADE_ACK_Event(DcpdPackageHeader_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_ENTER_DEV_MD_RESP_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuEnterDevMdResp_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_ENTER_DEV_MD_RESP_Event_Listener(SPP_DCPD_MSG_TO_MCU_ENTER_DEV_MD_RESP_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_ENTER_DEV_MD_RESP_Event(DcpdPackageToMcuEnterDevMdResp_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_VIN_F190_UPDATE_ACK_Callback)(SPP_UInt16 event_id, DcpdPackageHeader_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_VIN_F190_UPDATE_ACK_Event_Listener(SPP_DCPD_MSG_TO_MCU_VIN_F190_UPDATE_ACK_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_VIN_F190_UPDATE_ACK_Event(DcpdPackageHeader_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_TSP_IP_C007_ACK_Callback)(SPP_UInt16 event_id, DcpdPackageHeader_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_TSP_IP_C007_ACK_Event_Listener(SPP_DCPD_MSG_TO_MCU_TSP_IP_C007_ACK_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_TSP_IP_C007_ACK_Event(DcpdPackageHeader_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_TSP_SMS_C008_ACK_Callback)(SPP_UInt16 event_id, DcpdPackageHeader_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_TSP_SMS_C008_ACK_Event_Listener(SPP_DCPD_MSG_TO_MCU_TSP_SMS_C008_ACK_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_TSP_SMS_C008_ACK_Event(DcpdPackageHeader_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_TSP_PORT_C009_ACK_Callback)(SPP_UInt16 event_id, DcpdPackageHeader_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_TSP_PORT_C009_ACK_Event_Listener(SPP_DCPD_MSG_TO_MCU_TSP_PORT_C009_ACK_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_TSP_PORT_C009_ACK_Event(DcpdPackageHeader_t* data);

typedef void (*SPP_MPU_RES_GNSS_Callback)(SPP_UInt16 event_id, DcpdPackageEolGnssInfo_t* data);
SPP_STATUS SPP_Add_MPU_RES_GNSS_Event_Listener(SPP_MPU_RES_GNSS_Callback cb);
SPP_STATUS SPP_Recv_MPU_RES_GNSS_Event(DcpdPackageEolGnssInfo_t* data);

typedef void (*SPP_MPU_RES_WAN_Callback)(SPP_UInt16 event_id, DcpdPackageEolWanConnInfo_t* data);
SPP_STATUS SPP_Add_MPU_RES_WAN_Event_Listener(SPP_MPU_RES_WAN_Callback cb);
SPP_STATUS SPP_Recv_MPU_RES_WAN_Event(DcpdPackageEolWanConnInfo_t* data);

typedef void (*SPP_MPU_RES_UART_Callback)(SPP_UInt16 event_id, DcpdPackageEolUartInfo_t* data);
SPP_STATUS SPP_Add_MPU_RES_UART_Event_Listener(SPP_MPU_RES_UART_Callback cb);
SPP_STATUS SPP_Recv_MPU_RES_UART_Event(DcpdPackageEolUartInfo_t* data);

typedef void (*SPP_MPU_RES_PING_Callback)(SPP_UInt16 event_id, DcpdPackageEolPingInfo_t* data);
SPP_STATUS SPP_Add_MPU_RES_PING_Event_Listener(SPP_MPU_RES_PING_Callback cb);
SPP_STATUS SPP_Recv_MPU_RES_PING_Event(DcpdPackageEolPingInfo_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_EOL_CMD_RESP_Callback)(SPP_UInt16 event_id, DcpdPackageToMcuEolCmdResp_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_EOL_CMD_RESP_Event_Listener(SPP_DCPD_MSG_TO_MCU_EOL_CMD_RESP_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_EOL_CMD_RESP_Event(DcpdPackageToMcuEolCmdResp_t* data);

typedef void (*SPP_DCPD_MSG_TO_MCU_FOTA_FBL_COM_Callback)(SPP_UInt16 event_id, DcpdPackageFBLCom_t* data);
SPP_STATUS SPP_Add_DCPD_MSG_TO_MCU_FOTA_FBL_COM_Event_Listener(SPP_DCPD_MSG_TO_MCU_FOTA_FBL_COM_Callback cb);
SPP_STATUS SPP_Recv_DCPD_MSG_TO_MCU_FOTA_FBL_COM_Event(DcpdPackageFBLCom_t* data);
/**
 *  Send Event Interface
 */
SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_APN_CFG_RESP_Event(const DcpdPackageToMpuApnCfg_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_IMEI_B004_REQ_Event(const DcpdPackageHeader_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_ICCID_B001_REQ_Event(const DcpdPackageHeader_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_NADSTA1_B180_REQ_Event(const DcpdPackageHeader_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_NADSTA2_B181_REQ_Event(const DcpdPackageHeader_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_NADIP1_B182_REQ_Event(const DcpdPackageHeader_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_USER_ID_Event(const DcpdPackageToMpuUserId_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_NADIP2_B183_REQ_Event(const DcpdPackageHeader_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_RC_OTA_MSG_Event(const DcpdPackageToMpuRcMid3OtaMsgTx_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_BTC_OTA_MSG_Event(const DcpdPackageToMpuBtcOtaMsgTx_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_CA81_UPDATE_Event(const DcpdPackageToMpuBdChnCfgCA81_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_CF01_UPDATE_Event(const DcpdPackageToMpuBdEventCfgCF01_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_VIN_F190_UPDATE_Event(const DcpdPackageToMpuVin_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_START_AC_Event(const DcpdPackageHeader_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_AC_CFG_VER_RESP_Event(const DcpdPackageToMpuAcCfgVer_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_AC_CFG_SAVE_RESP_Event(const DcpdPackageToMpuAcCfgSaveResult_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_AC_INI_CFG_RESP_Event(const DcpdPackageToMpuAcCfgIniData_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_TSP_IP_C007_Event(const DcpdPackageToMpuTspIpC007Data_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_TSP_SMS_C008_Event(const DcpdPackageToMpuTspSmsC008Data_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_TSP_PORT_C009_Event(const DcpdPackageToMpuTspPortC009Data_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_TBOX_SN_F18C_Event(const DcpdPackageToMpuTboxSnF18CData_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_APP_STA_B200_Event(const DcpdPackageToMpuAppStaB200Data_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_VS_DATA_RESP_Event(const DcpdPackageToMpuVsData_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_CLR_ALM_REQ_Event(const DcpdPackageHeader_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_ALM_REQ_Event(const DcpdPackageToMpuAlmData_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_START_RJ_Event(const DcpdPackageToMpuStartRj_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_UPDTAE_RJ_Event(const DcpdPackageToMpuUpdateRj_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_END_RJ_Event(const DcpdPackageToMpuEndRj_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_NAD_SW_VER_B005_REQ_Event(const DcpdPackageHeader_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_NAD_HW_VER_B006_REQ_Event(const DcpdPackageHeader_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_MPUSW_VER_F1B5_REQ_Event(const DcpdPackageHeader_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_MPUSUPSW_VER_B000_REQ_Event(const DcpdPackageHeader_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_TSP_APN_C001_UPDATE_Event(const DcpdPackageToMpuTspApnC001Data_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_TSP_APN_USR_C002_UPDATE_Event(const DcpdPackageToMpuTspApnUsrC002Data_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_TSP_APN_PSW_C003_UPDATE_Event(const DcpdPackageToMpuTspApnPswC003Data_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_INFO_APN_C004_UPDATE_Event(const DcpdPackageToMpuInfoApnC004Data_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_INFO_APN_USR_C005_UPDATE_Event(const DcpdPackageToMpuInfoApnUsrC005Data_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_INFO_APN_PSW_C006_UPDATE_Event(const DcpdPackageToMpuInfoApnPswC006Data_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_VMODEL_C102_UPDATE_Event(const DcpdPackageToMpuVModelC102Data_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_START_KEYEXCHANGE_Event(const DcpdPackageToMpuStartKeyExchange_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_KE_SAVE_RESULT_Event(const DcpdPackageToMpuKeSaveResult_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_PM_STATUS_UPDATE_Event(const DcpdPackageToMpuPmStatusUpdate_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_SIM_STA_ACK_Event(const DcpdPackageHeader_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_TCALL_CFG_RESP_Event(const DcpdPackageToMputCallCfg_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_FOTA_CHK_REQ_Event(const DcpdPackageToMpuFotaChkReq_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_FOTA_CFG_RESP_Event(const DcpdPackageToMpuFotaCfgResp_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_FOTA_WAKEUPCAN_RESP_Event(const DcpdPackageToMpuFotaWkpCanNwResp_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_FOTA_CHK_RESP_Event(const DcpdPackageToMpuFotaCondChkResp_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_RDIAG_CHK_RESP_Event(const DcpdPackageToMpuRDiagCondChkResp_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_RDIAG_RESP_Event(const DcpdPackageToMpuRDiagResp_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_DTC_REPORT_REQ_Event(const DcpdPackageToMpuDTCReportReq_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_CERT_UPD_REQ_Event(const DcpdPackageToMpuCertUpdReq_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_AC_CERT_UPD_STA_ACK_Event(const DcpdPackageToMpuCertSaveResult_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_BD_START_STOP_INFO_Event(const DcpdPackageToMpuBdAppStartStopInfo_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_BD_EVENT_DATA_Event(const DcpdPackageToMpuBdAppEventData_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_SYS_TIME_RESP_Event(const DcpdPackageToMpuSysTimeOfMcu_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_FOTA_UDISK_UPD_REQ_Event(const DcpdPackageToMpuFotaAppUdiskUpdReq_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_SYS_TIME_REQ_Event(const DcpdPackageHeader_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_RC_OTA_MSG_ACK_Event(const DcpdPackageToMpuRxRcOtaAck_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_BTC_OTA_MSG_ACK_Event(const DcpdPackageToMpuRxBtcOtaAck_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_AVNSRV_VER_RESP_Event(const DcpdPackageToMpuAvnSrvVerResp_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_FOTA_KEY_STA_IND_Event(const DcpdPackageToMpuFotaAppKeyStaInd_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_FOTA_VER_RESP_Event(const DcpdPackageToMpuFotaVerResp_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_UPGRADE_INFO_Event(const DcpdPackageHeader_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_RESET_TBOX_ACK_Event(const DcpdPackageHeader_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_ENTER_DEV_MD_REQ_Event(const DcpdPackageHeader_t* data);

SPP_BOOL SPP_Send_MCU_REQ_GNSS_Event(const DcpdPackageHeader_t* data);

SPP_BOOL SPP_Send_MCU_REQ_WAN_Event(const DcpdPackageHeader_t* data);

SPP_BOOL SPP_Send_MCU_REQ_UART_Event(const DcpdPackageEolUartInfo_t* data);

SPP_BOOL SPP_Send_MCU_REQ_PING_Event(const DcpdPackageHeader_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_EOL_CMD_REQ_Event(const DcpdPackageToMpuEolCmdReq_t* data);

SPP_BOOL SPP_Send_DCPD_MSG_TO_MPU_FOTA_FBL_COM_Event(const DcpdPackageFBLCom_t* data);
/**
 *  Get SPP Version
 */
SPP_BOOL SPP_GetVersionEx(SppVersionEx* spp_version);

/**
 *  Get System Version
 */
SPP_BOOL SPP_GetVersion(SppVersion* spp_version);

#ifdef __cplusplus
}
#endif


#endif //MCU_SPP_H

